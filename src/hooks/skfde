#!/usr/bin/ash


SKFDE_CONFIG_FILE="/etc/skfde.conf"
SKFDE_SLEEP_AFTER_SUCCESSFUL_CRYPTSETUP="5"
SKFDE_CRYPTSETUP_RETRY="3"

message() {
  echo "$@" >&2
  return 0
}

skfde_open() {
  message "Generate the solokey response"
  read -ps 'Enter the SoloKey PIN: ' PIN

  _skfde_response="$(fido2luks print-secret $SKFDE_CREDENTIAL \
    --salt string:$SKFDE_CHALLENGE --pin --pin-input $PIN 2>&1)"
  message "Received Response: '$_skfde_response'"

  message "Passing '$_skfde_response' to cryptsetup"
  _tmp="$(printf %s "$_skfde_response" | cryptsetup luksOpen \
    /dev/disk/by-uuid/$SKFDE_LUKS_DEV $SKFDE_LUKS_NAME 2>&1)"
  _rc=$?

 if [ "$_rc" -eq 0 ]; then
   message "Decryption was successful."
   sleep "$SKFDE_SLEEP_AFTER_SUCCESSFUL_CRYPTSETUP"
   return 0
 else
   message "FAILED! [$_rc] $_tmp"
   return 1
 fi
}

run_hook() {

  # load variables from conf file
  . "$SKFDE_CONFIG_FILE" || {
    message "Failed to read the SKFDE configuration file '$SKFDE_CONFIG_FILE'"
    return 1
  }

  # sanity check
  echo "solokey credential: $SKFDE_CREDENTIAL"
  if [ -z "$SKFDE_LUKS_DEV" ]; then
    message "Please check SKFDE_LUKS_DEV in $SKFDE_CONFIG_FILE"
  elif [ -z "$SKFDE_CHALLENGE" ] || [ -z "$SKFDE_CREDENTIAL" ]; then
    message "Please set SoloKey challenge & credential in $SKFDE_CONFIG_FILE"
  fi

  # add dm-crypt kernel module
  modprobe -a -q dm-crypt

  # configure retry
  local retry
  retry=1
  while [ "$retry" -le "$SKFDE_CRYPTSETUP_RETRY" ]; do
    message "Attempt $retry :"
    skfde_open && return 0
    retry=$((retry+1))
  done

  message "Decryption Failed"
  return 1
}
